// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogSinkServiceClient is the client API for LogSinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogSinkServiceClient interface {
	// Receives a GrpcLogEntry
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
}

type logSinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogSinkServiceClient(cc grpc.ClientConnInterface) LogSinkServiceClient {
	return &logSinkServiceClient{cc}
}

func (c *logSinkServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/influxdata.grpc.binarylogsink.v1.LogSinkService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogSinkServiceServer is the server API for LogSinkService service.
// All implementations must embed UnimplementedLogSinkServiceServer
// for forward compatibility
type LogSinkServiceServer interface {
	// Receives a GrpcLogEntry
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	mustEmbedUnimplementedLogSinkServiceServer()
}

// UnimplementedLogSinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogSinkServiceServer struct {
}

func (UnimplementedLogSinkServiceServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedLogSinkServiceServer) mustEmbedUnimplementedLogSinkServiceServer() {}

// UnsafeLogSinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogSinkServiceServer will
// result in compilation errors.
type UnsafeLogSinkServiceServer interface {
	mustEmbedUnimplementedLogSinkServiceServer()
}

func RegisterLogSinkServiceServer(s grpc.ServiceRegistrar, srv LogSinkServiceServer) {
	s.RegisterService(&LogSinkService_ServiceDesc, srv)
}

func _LogSinkService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogSinkServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influxdata.grpc.binarylogsink.v1.LogSinkService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogSinkServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogSinkService_ServiceDesc is the grpc.ServiceDesc for LogSinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogSinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "influxdata.grpc.binarylogsink.v1.LogSinkService",
	HandlerType: (*LogSinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _LogSinkService_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "root.proto",
}
